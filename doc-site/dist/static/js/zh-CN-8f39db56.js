const t="数据录入",d="data_input",n="TreeSelect",e="树形选择器",o="tree-select",r=`<p>树型选择控件，类似<code>Select</code>的选择控件，可选择的数据结构是一个树形结构时，可以使用<code>TreeSelect</code></p>
`,a=`<h2 class="api-h2" id="API_h2">API</h2>
<h3>TreeSelect 属性</h3>
<div class="table-responsive"><table class="api-table table table-hover">
<thead class="thead-light">
<tr>
<th>参数</th>
<th>说明</th>
<th>类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>modelValue(v-model:modelValue)</td>
<td>选中的节点的key数组（受控）</td>
<td><code>stirng</code>/<code>string[]</code>/<code>number[]</code></td>
<td>[]</td>
</tr>
<tr>
<td>treeData</td>
<td>树数据</td>
<td>同<code>tree</code>组件</td>
<td>{}</td>
</tr>
<tr>
<td>nodeKey</td>
<td>每个树节点用来作为唯一标识的属性，整棵树应该是唯一的（比填）</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>checkStrictly</td>
<td>在显示复选框的情况下，是否严格的遵循父子不互相关联的做法，默认为 false</td>
<td>boolean</td>
<td>false</td>
</tr>
<tr>
<td>checkOnClickNode</td>
<td>是否在点击节点的时候选中节点，默认值为 false。（即只有在点击复选框时才会选中节点）</td>
<td>boolean</td>
<td>false</td>
</tr>
<tr>
<td>checkboxVisible</td>
<td>是否显示复选框</td>
<td>boolean</td>
<td>false</td>
</tr>
<tr>
<td>multiple</td>
<td>是否支持多选</td>
<td>boolean</td>
<td>false</td>
</tr>
<tr>
<td>multipleLimit</td>
<td>可被选择的最大数量</td>
<td>number</td>
<td></td>
</tr>
<tr>
<td>clearable</td>
<td>是否可以清空内容</td>
<td>boolean</td>
<td>false</td>
</tr>
<tr>
<td>lazy</td>
<td>是否懒加载子节点，需与<code>loadDataFn</code>方法结合使用</td>
<td>boolean</td>
<td>false</td>
</tr>
<tr>
<td>labels</td>
<td>输入框中选中项的显示名称，当<code>lazy=true</code>时必填</td>
<td>{label: string; value: string; tagType?: string; tagClass?: string; tagEffect?: string;}</td>
<td>[]</td>
</tr>
<tr>
<td>radioVisible</td>
<td>是否显示单选框</td>
<td>boolean</td>
<td>false</td>
</tr>
<tr>
<td>filterable</td>
<td>是否可以搜索</td>
<td>boolean</td>
<td>false</td>
</tr>
<tr>
<td>filterMethod</td>
<td>节点过滤函数</td>
<td>(nodeData: object, filterText: string) =&gt; boolean</td>
<td></td>
</tr>
<tr>
<td>loading</td>
<td>是否正在加载树数据</td>
<td>boolean</td>
<td>false</td>
</tr>
<tr>
<td>loadingText</td>
<td>加载数据时显示的文案</td>
<td>string</td>
<td>加载中...</td>
</tr>
<tr>
<td>deliveContextToFormItem</td>
<td>是否向<code>form-item</code>组件传递上下文信息，默认为 true</td>
<td>boolean</td>
<td>true</td>
</tr>
<tr>
<td>size</td>
<td>树形选择器大小。可选 <code>lg</code>、<code>sm</code></td>
<td>string</td>
<td>\`\`</td>
</tr>
<tr>
<td>placeholder</td>
<td>输入框的placeholder属性</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>name</td>
<td>输入框的name属性</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>ariaLabel</td>
<td>输入框的ariaLabel属性</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>id</td>
<td>输入框的 id</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>treeProps</td>
<td>tree组件的其他属性</td>
<td><code>tree</code>组件的所有属性</td>
<td>{}</td>
</tr>
<tr>
<td>defaultExpandCheckedNodesParent</td>
<td>默认是否展开选中节点的父级</td>
<td>boolean</td>
<td>true</td>
</tr>
<tr>
<td>emptyText</td>
<td>无数据时的文案</td>
<td>string</td>
<td>暂无数据</td>
</tr>
<tr>
<td>loadingColorType</td>
<td>加载图标的颜色的类型</td>
<td><code>primary</code>/ <code>secondary</code>/ <code>success</code>/ <code>danger</code>/ <code>warning</code>/ <code>info</code>/ <code>light</code>/ <code>dark</code></td>
<td></td>
</tr>
<tr>
<td>tagType</td>
<td>标签组件的type</td>
<td><code>primary</code>/ <code>secondary</code>/ <code>success</code>/ <code>danger</code>/ <code>warning</code>/ <code>info</code>/ <code>light</code>/ <code>dark</code></td>
<td>secondary</td>
</tr>
<tr>
<td>tagEffect</td>
<td>tag主题</td>
<td><code>dark</code>/<code>light</code>/<code>plain</code></td>
<td>light</td>
</tr>
<tr>
<td>tagCloseable</td>
<td>tag是否可关闭</td>
<td>boolean</td>
<td>true</td>
</tr>
<tr>
<td>maxTagCount</td>
<td>最多显示几个tag，小于等于0无效</td>
<td>number</td>
<td>0</td>
</tr>
<tr>
<td>dropdownClass</td>
<td>下拉内容的额外classname</td>
<td><code>string</code>/<code>array</code>/<code>object</code></td>
<td></td>
</tr>
</tbody>
</table></div>
<h3>TreeSelect 事件</h3>
<div class="table-responsive"><table class="api-table table table-hover">
<thead class="thead-light">
<tr>
<th>事件名称</th>
<th>说明</th>
<th>回调参数</th>
</tr>
</thead>
<tbody>
<tr>
<td>change</td>
<td>modelValue值变化时触发</td>
<td>function(value: stirng丨string[])</td>
</tr>
<tr>
<td>node-expand</td>
<td>节点展开/收起时触发</td>
<td>function(nodeData: TreeNode, expanded: boolean, nodeState: any)</td>
</tr>
<tr>
<td>check-change</td>
<td>节点选中/取消选中时触发</td>
<td>function(nodeData: TreeNode, isChecked: boolean)</td>
</tr>
<tr>
<td>node-click</td>
<td>节点点击时触发</td>
<td>function(nodeData: TreeNode, nodeState: any)</td>
</tr>
<tr>
<td>node-destroy</td>
<td>节点销毁时触发</td>
<td>function(nodeData: TreeNode)</td>
</tr>
<tr>
<td>show</td>
<td>下拉内容显示时触发</td>
<td></td>
</tr>
<tr>
<td>hide</td>
<td>下拉内容隐藏时触发</td>
<td></td>
</tr>
</tbody>
</table></div>
<h3>TreeSelect 插槽</h3>
<div class="table-responsive"><table class="api-table table table-hover">
<thead class="thead-light">
<tr>
<th>插槽名称</th>
<th>说明</th>
<th>版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>tag</td>
<td>多选时，tag的内容</td>
<td></td>
</tr>
<tr>
<td>suffixIcon</td>
<td>向下箭头图标</td>
<td></td>
</tr>
<tr>
<td>maxTagPlaceholder</td>
<td>多选时，tag最大显示数量超过后折叠的内容</td>
<td></td>
</tr>
</tbody>
</table></div>
<h3>TreeSelect 函数</h3>
<div class="table-responsive"><table class="api-table table table-hover">
<thead class="thead-light">
<tr>
<th>函数名称</th>
<th>说明</th>
<th>参数</th>
</tr>
</thead>
<tbody>
<tr>
<td>setValidateStatus</td>
<td>设置选择器的校验状态</td>
<td><code>status</code>，可选值有：<code>validating</code>/<code>success</code>/<code>error</code></td>
</tr>
<tr>
<td>dropdownShow</td>
<td>显示选择器下拉菜单</td>
<td></td>
</tr>
<tr>
<td>dropdownHide</td>
<td>隐藏选择器下拉菜单</td>
<td></td>
</tr>
<tr>
<td>refreshDropdown</td>
<td>刷新下拉菜单位置</td>
<td></td>
</tr>
</tbody>
</table></div>
`,c={type:t,typeCode:d,title:n,subtitle:e,componentName:o,description:r,apiContent:a};export{a as apiContent,o as componentName,c as default,r as description,e as subtitle,n as title,t as type,d as typeCode};
